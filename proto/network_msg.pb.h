// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_5fmsg_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_network_5fmsg_2eproto_metadata_getter(int index);
namespace net {
namespace msg {
class RequestMsg;
struct RequestMsgDefaultTypeInternal;
extern RequestMsgDefaultTypeInternal _RequestMsg_default_instance_;
class ResponseMsg;
struct ResponseMsgDefaultTypeInternal;
extern ResponseMsgDefaultTypeInternal _ResponseMsg_default_instance_;
}  // namespace msg
}  // namespace net
PROTOBUF_NAMESPACE_OPEN
template<> ::net::msg::RequestMsg* Arena::CreateMaybeMessage<::net::msg::RequestMsg>(Arena*);
template<> ::net::msg::ResponseMsg* Arena::CreateMaybeMessage<::net::msg::ResponseMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace net {
namespace msg {

enum RequestMsg_CmdType : int {
  RequestMsg_CmdType_NewOrUpdate = 1,
  RequestMsg_CmdType_Check = 2,
  RequestMsg_CmdType_Revoke = 3,
  RequestMsg_CmdType_View = 4
};
bool RequestMsg_CmdType_IsValid(int value);
constexpr RequestMsg_CmdType RequestMsg_CmdType_CmdType_MIN = RequestMsg_CmdType_NewOrUpdate;
constexpr RequestMsg_CmdType RequestMsg_CmdType_CmdType_MAX = RequestMsg_CmdType_View;
constexpr int RequestMsg_CmdType_CmdType_ARRAYSIZE = RequestMsg_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestMsg_CmdType_descriptor();
template<typename T>
inline const std::string& RequestMsg_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestMsg_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestMsg_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestMsg_CmdType_descriptor(), enum_t_value);
}
inline bool RequestMsg_CmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestMsg_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestMsg_CmdType>(
    RequestMsg_CmdType_descriptor(), name, value);
}
// ===================================================================

class RequestMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.msg.RequestMsg) */ {
 public:
  inline RequestMsg() : RequestMsg(nullptr) {}
  virtual ~RequestMsg();
  explicit constexpr RequestMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMsg(const RequestMsg& from);
  RequestMsg(RequestMsg&& from) noexcept
    : RequestMsg() {
    *this = ::std::move(from);
  }

  inline RequestMsg& operator=(const RequestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMsg& operator=(RequestMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMsg* internal_default_instance() {
    return reinterpret_cast<const RequestMsg*>(
               &_RequestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestMsg& a, RequestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMsg* New() const final {
    return CreateMaybeMessage<RequestMsg>(nullptr);
  }

  RequestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMsg& from);
  void MergeFrom(const RequestMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.msg.RequestMsg";
  }
  protected:
  explicit RequestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_5fmsg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestMsg_CmdType CmdType;
  static constexpr CmdType NewOrUpdate =
    RequestMsg_CmdType_NewOrUpdate;
  static constexpr CmdType Check =
    RequestMsg_CmdType_Check;
  static constexpr CmdType Revoke =
    RequestMsg_CmdType_Revoke;
  static constexpr CmdType View =
    RequestMsg_CmdType_View;
  static inline bool CmdType_IsValid(int value) {
    return RequestMsg_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    RequestMsg_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    RequestMsg_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    RequestMsg_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return RequestMsg_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return RequestMsg_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CmdType* value) {
    return RequestMsg_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kAuthCodeFieldNumber = 4,
    kR1FieldNumber = 5,
    kCmdTypeFieldNumber = 1,
  };
  // required string serverId = 2;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  const std::string& serverid() const;
  void set_serverid(const std::string& value);
  void set_serverid(std::string&& value);
  void set_serverid(const char* value);
  void set_serverid(const char* value, size_t size);
  std::string* mutable_serverid();
  std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // required string clientId = 3;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // optional string authCode = 4;
  bool has_authcode() const;
  private:
  bool _internal_has_authcode() const;
  public:
  void clear_authcode();
  const std::string& authcode() const;
  void set_authcode(const std::string& value);
  void set_authcode(std::string&& value);
  void set_authcode(const char* value);
  void set_authcode(const char* value, size_t size);
  std::string* mutable_authcode();
  std::string* release_authcode();
  void set_allocated_authcode(std::string* authcode);
  private:
  const std::string& _internal_authcode() const;
  void _internal_set_authcode(const std::string& value);
  std::string* _internal_mutable_authcode();
  public:

  // optional string r1 = 5;
  bool has_r1() const;
  private:
  bool _internal_has_r1() const;
  public:
  void clear_r1();
  const std::string& r1() const;
  void set_r1(const std::string& value);
  void set_r1(std::string&& value);
  void set_r1(const char* value);
  void set_r1(const char* value, size_t size);
  std::string* mutable_r1();
  std::string* release_r1();
  void set_allocated_r1(std::string* r1);
  private:
  const std::string& _internal_r1() const;
  void _internal_set_r1(const std::string& value);
  std::string* _internal_mutable_r1();
  public:

  // required .net.msg.RequestMsg.CmdType cmdType = 1;
  bool has_cmdtype() const;
  private:
  bool _internal_has_cmdtype() const;
  public:
  void clear_cmdtype();
  ::net::msg::RequestMsg_CmdType cmdtype() const;
  void set_cmdtype(::net::msg::RequestMsg_CmdType value);
  private:
  ::net::msg::RequestMsg_CmdType _internal_cmdtype() const;
  void _internal_set_cmdtype(::net::msg::RequestMsg_CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:net.msg.RequestMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r1_;
  int cmdtype_;
  friend struct ::TableStruct_network_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ResponseMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:net.msg.ResponseMsg) */ {
 public:
  inline ResponseMsg() : ResponseMsg(nullptr) {}
  virtual ~ResponseMsg();
  explicit constexpr ResponseMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMsg(const ResponseMsg& from);
  ResponseMsg(ResponseMsg&& from) noexcept
    : ResponseMsg() {
    *this = ::std::move(from);
  }

  inline ResponseMsg& operator=(const ResponseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMsg& operator=(ResponseMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMsg* internal_default_instance() {
    return reinterpret_cast<const ResponseMsg*>(
               &_ResponseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseMsg& a, ResponseMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseMsg* New() const final {
    return CreateMaybeMessage<ResponseMsg>(nullptr);
  }

  ResponseMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseMsg& from);
  void MergeFrom(const ResponseMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "net.msg.ResponseMsg";
  }
  protected:
  explicit ResponseMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_network_5fmsg_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kR2FieldNumber = 4,
    kCodeFieldNumber = 1,
    kSecKeyIdFieldNumber = 5,
  };
  // required string serverId = 2;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  const std::string& serverid() const;
  void set_serverid(const std::string& value);
  void set_serverid(std::string&& value);
  void set_serverid(const char* value);
  void set_serverid(const char* value, size_t size);
  std::string* mutable_serverid();
  std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // required string clientId = 3;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // optional string r2 = 4;
  bool has_r2() const;
  private:
  bool _internal_has_r2() const;
  public:
  void clear_r2();
  const std::string& r2() const;
  void set_r2(const std::string& value);
  void set_r2(std::string&& value);
  void set_r2(const char* value);
  void set_r2(const char* value, size_t size);
  std::string* mutable_r2();
  std::string* release_r2();
  void set_allocated_r2(std::string* r2);
  private:
  const std::string& _internal_r2() const;
  void _internal_set_r2(const std::string& value);
  std::string* _internal_mutable_r2();
  public:

  // required int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 secKeyId = 5;
  bool has_seckeyid() const;
  private:
  bool _internal_has_seckeyid() const;
  public:
  void clear_seckeyid();
  ::PROTOBUF_NAMESPACE_ID::int32 seckeyid() const;
  void set_seckeyid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seckeyid() const;
  void _internal_set_seckeyid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:net.msg.ResponseMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r2_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 seckeyid_;
  friend struct ::TableStruct_network_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestMsg

// required .net.msg.RequestMsg.CmdType cmdType = 1;
inline bool RequestMsg::_internal_has_cmdtype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RequestMsg::has_cmdtype() const {
  return _internal_has_cmdtype();
}
inline void RequestMsg::clear_cmdtype() {
  cmdtype_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::net::msg::RequestMsg_CmdType RequestMsg::_internal_cmdtype() const {
  return static_cast< ::net::msg::RequestMsg_CmdType >(cmdtype_);
}
inline ::net::msg::RequestMsg_CmdType RequestMsg::cmdtype() const {
  // @@protoc_insertion_point(field_get:net.msg.RequestMsg.cmdType)
  return _internal_cmdtype();
}
inline void RequestMsg::_internal_set_cmdtype(::net::msg::RequestMsg_CmdType value) {
  assert(::net::msg::RequestMsg_CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  cmdtype_ = value;
}
inline void RequestMsg::set_cmdtype(::net::msg::RequestMsg_CmdType value) {
  _internal_set_cmdtype(value);
  // @@protoc_insertion_point(field_set:net.msg.RequestMsg.cmdType)
}

// required string serverId = 2;
inline bool RequestMsg::_internal_has_serverid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestMsg::has_serverid() const {
  return _internal_has_serverid();
}
inline void RequestMsg::clear_serverid() {
  serverid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestMsg::serverid() const {
  // @@protoc_insertion_point(field_get:net.msg.RequestMsg.serverId)
  return _internal_serverid();
}
inline void RequestMsg::set_serverid(const std::string& value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:net.msg.RequestMsg.serverId)
}
inline std::string* RequestMsg::mutable_serverid() {
  // @@protoc_insertion_point(field_mutable:net.msg.RequestMsg.serverId)
  return _internal_mutable_serverid();
}
inline const std::string& RequestMsg::_internal_serverid() const {
  return serverid_.Get();
}
inline void RequestMsg::_internal_set_serverid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMsg::set_serverid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.RequestMsg.serverId)
}
inline void RequestMsg::set_serverid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.RequestMsg.serverId)
}
inline void RequestMsg::set_serverid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.RequestMsg.serverId)
}
inline std::string* RequestMsg::_internal_mutable_serverid() {
  _has_bits_[0] |= 0x00000001u;
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMsg::release_serverid() {
  // @@protoc_insertion_point(field_release:net.msg.RequestMsg.serverId)
  if (!_internal_has_serverid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serverid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMsg::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.RequestMsg.serverId)
}

// required string clientId = 3;
inline bool RequestMsg::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestMsg::has_clientid() const {
  return _internal_has_clientid();
}
inline void RequestMsg::clear_clientid() {
  clientid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestMsg::clientid() const {
  // @@protoc_insertion_point(field_get:net.msg.RequestMsg.clientId)
  return _internal_clientid();
}
inline void RequestMsg::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:net.msg.RequestMsg.clientId)
}
inline std::string* RequestMsg::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:net.msg.RequestMsg.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& RequestMsg::_internal_clientid() const {
  return clientid_.Get();
}
inline void RequestMsg::_internal_set_clientid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMsg::set_clientid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.RequestMsg.clientId)
}
inline void RequestMsg::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.RequestMsg.clientId)
}
inline void RequestMsg::set_clientid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.RequestMsg.clientId)
}
inline std::string* RequestMsg::_internal_mutable_clientid() {
  _has_bits_[0] |= 0x00000002u;
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMsg::release_clientid() {
  // @@protoc_insertion_point(field_release:net.msg.RequestMsg.clientId)
  if (!_internal_has_clientid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMsg::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.RequestMsg.clientId)
}

// optional string authCode = 4;
inline bool RequestMsg::_internal_has_authcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestMsg::has_authcode() const {
  return _internal_has_authcode();
}
inline void RequestMsg::clear_authcode() {
  authcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RequestMsg::authcode() const {
  // @@protoc_insertion_point(field_get:net.msg.RequestMsg.authCode)
  return _internal_authcode();
}
inline void RequestMsg::set_authcode(const std::string& value) {
  _internal_set_authcode(value);
  // @@protoc_insertion_point(field_set:net.msg.RequestMsg.authCode)
}
inline std::string* RequestMsg::mutable_authcode() {
  // @@protoc_insertion_point(field_mutable:net.msg.RequestMsg.authCode)
  return _internal_mutable_authcode();
}
inline const std::string& RequestMsg::_internal_authcode() const {
  return authcode_.Get();
}
inline void RequestMsg::_internal_set_authcode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMsg::set_authcode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  authcode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.RequestMsg.authCode)
}
inline void RequestMsg::set_authcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  authcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.RequestMsg.authCode)
}
inline void RequestMsg::set_authcode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  authcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.RequestMsg.authCode)
}
inline std::string* RequestMsg::_internal_mutable_authcode() {
  _has_bits_[0] |= 0x00000004u;
  return authcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMsg::release_authcode() {
  // @@protoc_insertion_point(field_release:net.msg.RequestMsg.authCode)
  if (!_internal_has_authcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return authcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMsg::set_allocated_authcode(std::string* authcode) {
  if (authcode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.RequestMsg.authCode)
}

// optional string r1 = 5;
inline bool RequestMsg::_internal_has_r1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestMsg::has_r1() const {
  return _internal_has_r1();
}
inline void RequestMsg::clear_r1() {
  r1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RequestMsg::r1() const {
  // @@protoc_insertion_point(field_get:net.msg.RequestMsg.r1)
  return _internal_r1();
}
inline void RequestMsg::set_r1(const std::string& value) {
  _internal_set_r1(value);
  // @@protoc_insertion_point(field_set:net.msg.RequestMsg.r1)
}
inline std::string* RequestMsg::mutable_r1() {
  // @@protoc_insertion_point(field_mutable:net.msg.RequestMsg.r1)
  return _internal_mutable_r1();
}
inline const std::string& RequestMsg::_internal_r1() const {
  return r1_.Get();
}
inline void RequestMsg::_internal_set_r1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  r1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMsg::set_r1(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  r1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.RequestMsg.r1)
}
inline void RequestMsg::set_r1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  r1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.RequestMsg.r1)
}
inline void RequestMsg::set_r1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  r1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.RequestMsg.r1)
}
inline std::string* RequestMsg::_internal_mutable_r1() {
  _has_bits_[0] |= 0x00000008u;
  return r1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMsg::release_r1() {
  // @@protoc_insertion_point(field_release:net.msg.RequestMsg.r1)
  if (!_internal_has_r1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return r1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMsg::set_allocated_r1(std::string* r1) {
  if (r1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  r1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.RequestMsg.r1)
}

// -------------------------------------------------------------------

// ResponseMsg

// required int32 code = 1;
inline bool ResponseMsg::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResponseMsg::has_code() const {
  return _internal_has_code();
}
inline void ResponseMsg::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseMsg::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseMsg::code() const {
  // @@protoc_insertion_point(field_get:net.msg.ResponseMsg.code)
  return _internal_code();
}
inline void ResponseMsg::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  code_ = value;
}
inline void ResponseMsg::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:net.msg.ResponseMsg.code)
}

// required string serverId = 2;
inline bool ResponseMsg::_internal_has_serverid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseMsg::has_serverid() const {
  return _internal_has_serverid();
}
inline void ResponseMsg::clear_serverid() {
  serverid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseMsg::serverid() const {
  // @@protoc_insertion_point(field_get:net.msg.ResponseMsg.serverId)
  return _internal_serverid();
}
inline void ResponseMsg::set_serverid(const std::string& value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:net.msg.ResponseMsg.serverId)
}
inline std::string* ResponseMsg::mutable_serverid() {
  // @@protoc_insertion_point(field_mutable:net.msg.ResponseMsg.serverId)
  return _internal_mutable_serverid();
}
inline const std::string& ResponseMsg::_internal_serverid() const {
  return serverid_.Get();
}
inline void ResponseMsg::_internal_set_serverid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseMsg::set_serverid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.ResponseMsg.serverId)
}
inline void ResponseMsg::set_serverid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.ResponseMsg.serverId)
}
inline void ResponseMsg::set_serverid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.ResponseMsg.serverId)
}
inline std::string* ResponseMsg::_internal_mutable_serverid() {
  _has_bits_[0] |= 0x00000001u;
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseMsg::release_serverid() {
  // @@protoc_insertion_point(field_release:net.msg.ResponseMsg.serverId)
  if (!_internal_has_serverid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serverid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseMsg::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.ResponseMsg.serverId)
}

// required string clientId = 3;
inline bool ResponseMsg::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseMsg::has_clientid() const {
  return _internal_has_clientid();
}
inline void ResponseMsg::clear_clientid() {
  clientid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResponseMsg::clientid() const {
  // @@protoc_insertion_point(field_get:net.msg.ResponseMsg.clientId)
  return _internal_clientid();
}
inline void ResponseMsg::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:net.msg.ResponseMsg.clientId)
}
inline std::string* ResponseMsg::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:net.msg.ResponseMsg.clientId)
  return _internal_mutable_clientid();
}
inline const std::string& ResponseMsg::_internal_clientid() const {
  return clientid_.Get();
}
inline void ResponseMsg::_internal_set_clientid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseMsg::set_clientid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.ResponseMsg.clientId)
}
inline void ResponseMsg::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.ResponseMsg.clientId)
}
inline void ResponseMsg::set_clientid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.ResponseMsg.clientId)
}
inline std::string* ResponseMsg::_internal_mutable_clientid() {
  _has_bits_[0] |= 0x00000002u;
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseMsg::release_clientid() {
  // @@protoc_insertion_point(field_release:net.msg.ResponseMsg.clientId)
  if (!_internal_has_clientid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return clientid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseMsg::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.ResponseMsg.clientId)
}

// optional string r2 = 4;
inline bool ResponseMsg::_internal_has_r2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResponseMsg::has_r2() const {
  return _internal_has_r2();
}
inline void ResponseMsg::clear_r2() {
  r2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResponseMsg::r2() const {
  // @@protoc_insertion_point(field_get:net.msg.ResponseMsg.r2)
  return _internal_r2();
}
inline void ResponseMsg::set_r2(const std::string& value) {
  _internal_set_r2(value);
  // @@protoc_insertion_point(field_set:net.msg.ResponseMsg.r2)
}
inline std::string* ResponseMsg::mutable_r2() {
  // @@protoc_insertion_point(field_mutable:net.msg.ResponseMsg.r2)
  return _internal_mutable_r2();
}
inline const std::string& ResponseMsg::_internal_r2() const {
  return r2_.Get();
}
inline void ResponseMsg::_internal_set_r2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  r2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseMsg::set_r2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  r2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:net.msg.ResponseMsg.r2)
}
inline void ResponseMsg::set_r2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  r2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:net.msg.ResponseMsg.r2)
}
inline void ResponseMsg::set_r2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  r2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:net.msg.ResponseMsg.r2)
}
inline std::string* ResponseMsg::_internal_mutable_r2() {
  _has_bits_[0] |= 0x00000004u;
  return r2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseMsg::release_r2() {
  // @@protoc_insertion_point(field_release:net.msg.ResponseMsg.r2)
  if (!_internal_has_r2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return r2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseMsg::set_allocated_r2(std::string* r2) {
  if (r2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  r2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:net.msg.ResponseMsg.r2)
}

// optional int32 secKeyId = 5;
inline bool ResponseMsg::_internal_has_seckeyid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResponseMsg::has_seckeyid() const {
  return _internal_has_seckeyid();
}
inline void ResponseMsg::clear_seckeyid() {
  seckeyid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseMsg::_internal_seckeyid() const {
  return seckeyid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseMsg::seckeyid() const {
  // @@protoc_insertion_point(field_get:net.msg.ResponseMsg.secKeyId)
  return _internal_seckeyid();
}
inline void ResponseMsg::_internal_set_seckeyid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  seckeyid_ = value;
}
inline void ResponseMsg::set_seckeyid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seckeyid(value);
  // @@protoc_insertion_point(field_set:net.msg.ResponseMsg.secKeyId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace net

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::net::msg::RequestMsg_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::net::msg::RequestMsg_CmdType>() {
  return ::net::msg::RequestMsg_CmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_5fmsg_2eproto
